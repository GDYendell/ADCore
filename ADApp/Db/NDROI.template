#=================================================================#
# Template file: NDROI.template
# Database for ND ROIs
# Mark Rivers
# April 22, 2008

# Macros:
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, TIMEOUT, Timeout
# % macro, ADDR, Asyn Port address

# This associates the template with an edm screen
# % gui, $(PORT), edmtab, NDROI.edl, P=$(P),R=$(R)

# This associates a BOY screen with the template
# % gui, $(PORT), boydetail,ADApp_opi/roi_detail.opi, P=$(P), R=$(R), DESC=Region of Interest
# % gui, $(PORT), boyembed, ADApp_opi/roi_embed_box.opi, P=$(P), R=$(R), DESC=Region of Interest
# % gui, $(PORT), boyembed, ADApp_opi/roi_embed.opi, P=$(P), R=$(R), DESC=Region of Interest

# Info
# % gui, $(PORT), readback, Port name,   $(P)$(R)PortName_RBV
# % gui, $(PORT), readback, Plugin type,   $(P)$(R)PluginType_RBV
# Input
# % gui, $(PORT), demand, Input,   $(P)$(R)NDArrayPort
# % gui, $(PORT), readback, Input,   $(P)$(R)NDArrayPort_RBV
# % gui, $(PORT), enum, Callbacks,   $(P)$(R)EnableCallbacks
# % gui, $(PORT), readback, Callbacks,   $(P)$(R)EnableCallbacks_RBV
# % gui, $(PORT), demand, Min Time,   $(P)$(R)MinCallbackTime
# % gui, $(PORT), readback, Min Time,   $(P)$(R)MinCallbackTime_RBV
# % gui, $(PORT), enum, Blocking,   $(P)$(R)BlockingCallbacks
# % gui, $(PORT), readback, Blocking,   $(P)$(R)BlockingCallbacks_RBV
# % gui, $(PORT), demand, Array counter,   $(P)$(R)ArrayCounter
# % gui, $(PORT), readback, Array counter,   $(P)$(R)ArrayCounter_RBV
# % gui, $(PORT), readback, Array rate,   $(P)$(R)ArrayRate_RBV
# % gui, $(PORT), readback, Queue use,   $(P)$(R)QueueUse
# % gui, $(PORT), readback, Queue size,   $(P)$(R)QueueSize
# % gui, $(PORT), demand, Dropped,   $(P)$(R)DroppedArrays
# % gui, $(PORT), readback, Dropped,   $(P)$(R)DroppedArrays_RBV
# % gui, $(PORT), readback, Num Dimensions,   $(P)$(R)NDimensions_RBV
# % gui, $(PORT), readback, Dim 0 size,   $(P)$(R)ArraySize0_RBV
# % gui, $(PORT), readback, Dim 1 size,   $(P)$(R)ArraySize1_RBV
# % gui, $(PORT), readback, Dim 2 size,   $(P)$(R)ArraySize2_RBV
# % gui, $(PORT), readback, In data type,   $(P)$(R)DataType_RBV
# % gui, $(PORT), readback, Colour mode,   $(P)$(R)ColorMode_RBV
# % gui, $(PORT), readback, Bayer pattern,   $(P)$(R)BayerPattern_RBV
# % gui, $(PORT), readback, Unique id,   $(P)$(R)UniqueId_RBV
# % gui, $(PORT), readback, Timestamp,   $(P)$(R)TimeStamp_RBV
# Output
# % gui, $(PORT), demand, Name,   $(P)$(R)Name
# % gui, $(PORT), enum, Out data type,   $(P)$(R)DataTypeOut
# % gui, $(PORT), readback, Out data type,   $(P)$(R)DataTypeOut_RBV
# % gui, $(PORT), demand, Attributes file,   $(P)$(R)NDAttributesFile
# Scaling
# % gui, $(PORT), enum, Scaling,   $(P)$(R)EnableScale
# % gui, $(PORT), readback, Scaling,   $(P)$(R)EnableScale_RBV
# % gui, $(PORT), demand, Scale divisor,   $(P)$(R)Scale
# % gui, $(PORT), readback, Scale divisor,   $(P)$(R)Scale_RBV
# X region
# % gui, $(PORT), enum, X,   $(P)$(R)EnableX
# % gui, $(PORT), readback, X,   $(P)$(R)EnableX_RBV
# % gui, $(PORT), enum, Autosize X,   $(P)$(R)AutoSizeX
# % gui, $(PORT), readback, Autosize X,   $(P)$(R)AutoSizeX_RBV
# % gui, $(PORT), readback, Input size X,   $(P)$(R)MaxSizeX_RBV
# % gui, $(PORT), demand, Binning X,   $(P)$(R)BinX
# % gui, $(PORT), readback, Binning X,   $(P)$(R)BinX_RBV
# % gui, $(PORT), demand, Start X,   $(P)$(R)MinX
# % gui, $(PORT), readback, Start X,   $(P)$(R)MinX_RBV
# % gui, $(PORT), demand, Size X,   $(P)$(R)SizeX
# % gui, $(PORT), readback, Size X,   $(P)$(R)SizeX_RBV
# % gui, $(PORT), enum, Reverse X,   $(P)$(R)ReverseX
# % gui, $(PORT), readback, Reverse X,   $(P)$(R)ReverseX_RBV
# % gui, $(PORT), readback, Bytes X,   $(P)$(R)ArraySizeX_RBV
# Y region
# % gui, $(PORT), enum, Y,   $(P)$(R)EnableY
# % gui, $(PORT), readback, Y,   $(P)$(R)EnableY_RBV
# % gui, $(PORT), enum, Autosize Y,   $(P)$(R)AutoSizeY
# % gui, $(PORT), readback, Autosize Y,   $(P)$(R)AutoSizeY_RBV
# % gui, $(PORT), readback, Input size Y,   $(P)$(R)MaxSizeY_RBV
# % gui, $(PORT), demand, Binning Y,   $(P)$(R)BinY
# % gui, $(PORT), readback, Binning Y,   $(P)$(R)BinY_RBV
# % gui, $(PORT), demand, Start Y,   $(P)$(R)MinY
# % gui, $(PORT), readback, Start Y,   $(P)$(R)MinY_RBV
# % gui, $(PORT), demand, Size Y,   $(P)$(R)SizeY
# % gui, $(PORT), readback, Size Y,   $(P)$(R)SizeY_RBV
# % gui, $(PORT), enum, Reverse Y,   $(P)$(R)ReverseY
# % gui, $(PORT), readback, Reverse Y,   $(P)$(R)ReverseY_RBV
# % gui, $(PORT), readback, Bytes Y,   $(P)$(R)ArraySizeY_RBV
# Z region
# % gui, $(PORT), enum, Z,   $(P)$(R)EnableZ
# % gui, $(PORT), readback, Z,   $(P)$(R)EnableZ_RBV
# % gui, $(PORT), enum, Autosize Z,   $(P)$(R)AutoSizeZ
# % gui, $(PORT), readback, Autosize Z,   $(P)$(R)AutoSizeZ_RBV
# % gui, $(PORT), readback, Input size Z,   $(P)$(R)MaxSizeZ_RBV
# % gui, $(PORT), demand, Binning Z,   $(P)$(R)BinZ
# % gui, $(PORT), readback, Binning Z,   $(P)$(R)BinZ_RBV
# % gui, $(PORT), demand, Start Z,   $(P)$(R)MinZ
# % gui, $(PORT), readback, Start Z,   $(P)$(R)MinZ_RBV
# % gui, $(PORT), demand, Size Z,   $(P)$(R)SizeZ
# % gui, $(PORT), readback, Size Z,   $(P)$(R)SizeZ_RBV
# % gui, $(PORT), enum, Reverse Z,   $(P)$(R)ReverseZ
# % gui, $(PORT), readback, Reverse Z,   $(P)$(R)ReverseZ_RBV
# % gui, $(PORT), readback, Bytes Z,   $(P)$(R)ArraySizeZ_RBV
# Memory
# % gui, $(PORT), readback, Max memory,   $(P)$(R)PoolMaxMem
# % gui, $(PORT), readback, Max buffers,   $(P)$(R)PoolMaxBuffers
# % gui, $(PORT), readback, Used memory,   $(P)$(R)PoolUsedMem
# % gui, $(PORT), readback, Allocated buffers,   $(P)$(R)PoolAllocBuffers
# % gui, $(PORT), readback, Free buffers,   $(P)$(R)PoolFreeBuffers

include "NDPluginBase.template"

###################################################################
#  These records control the label for the ROI                    #
###################################################################
record(stringout, "$(P)$(R)Name")
{
   field(PINI, "YES")
   field(DTYP, "asynOctetWrite")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))NAME")
   info(autosaveFields, "VAL")
}

record(stringin, "$(P)$(R)Name_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))NAME")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the ROI definition                       #
#  including binning, region start and size                       # 
###################################################################

record(longout, "$(P)$(R)BinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM0_BIN")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "$(P)$(R)BinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM0_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)BinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM1_BIN")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "$(P)$(R)BinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM1_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)BinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM2_BIN")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "$(P)$(R)BinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM2_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)MinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM0_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(longin, "$(P)$(R)MinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM0_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)MinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM1_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(longin, "$(P)$(R)MinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM1_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)MinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM2_MIN")
   field(LOPR, "1")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(longin, "$(P)$(R)MinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM2_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)SizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM0_SIZE")
   field(VAL,  "1000000")
   info(autosaveFields, "VAL")
}

record(longin, "$(P)$(R)SizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM0_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)SizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM1_SIZE")
   field(VAL,  "1000000")
   info(autosaveFields, "VAL")
}

record(longin, "$(P)$(R)SizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM1_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)SizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM2_SIZE")
   field(VAL,  "1000000")
   info(autosaveFields, "VAL")
}

record(longin, "$(P)$(R)SizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM2_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)AutoSizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM0_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   info(autosaveFields, "VAL")
}

record(bi, "$(P)$(R)AutoSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM0_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)AutoSizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM1_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   info(autosaveFields, "VAL")
}

record(bi, "$(P)$(R)AutoSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM1_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)AutoSizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM2_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   info(autosaveFields, "VAL")
}

record(bi, "$(P)$(R)AutoSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM2_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)MaxSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM0_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)MaxSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM1_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)MaxSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM2_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)ReverseX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM0_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   info(autosaveFields, "VAL")
}

record(bi, "$(P)$(R)ReverseX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM0_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)ReverseY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM1_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   info(autosaveFields, "VAL")
}

record(bi, "$(P)$(R)ReverseY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM1_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)ReverseZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM2_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   info(autosaveFields, "VAL")
}

record(bi, "$(P)$(R)ReverseZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM2_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)EnableX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM0_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   info(autosaveFields, "VAL")
}

record(bi, "$(P)$(R)EnableX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM0_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)EnableY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM1_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   info(autosaveFields, "VAL")
}

record(bi, "$(P)$(R)EnableY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM1_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)EnableZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM2_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   info(autosaveFields, "VAL")
}

record(bi, "$(P)$(R)EnableZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DIM2_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the scaling of the data.  Useful when    #
#  binning or converting data types                               # 
###################################################################

record(bo, "$(P)$(R)EnableScale")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ENABLE_SCALE")
   field(VAL,  "0")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   info(autosaveFields, "VAL")
}

record(bi, "$(P)$(R)EnableScale_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ENABLE_SCALE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)Scale")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SCALE_VALUE")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(ai, "$(P)$(R)Scale_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SCALE_VALUE")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the data type of the array data          # 
#  The last entry is "Automatic" meaning preserve the data type   #
#  of the input array.                                            # 
###################################################################

record(mbbo, "$(P)$(R)DataTypeOut")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(VAL,  "8")
   info(autosaveFields, "VAL")
}

record(mbbi, "$(P)$(R)DataTypeOut_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records set the HOPR and LOPR values for the position    #
#  and size to the maximum for the input array                    #
###################################################################

record(longin, "$(P)$(R)MaxX")
{
    field(INP,  "$(P)$(R)MaxSizeX_RBV CP")
    field(FLNK, "$(P)$(R)SetXHOPR.PROC PP")
}

record(dfanout, "$(P)$(R)SetXHOPR")
{
    field(DOL,  "$(P)$(R)MaxX NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(P)$(R)MinX.HOPR NPP")
    field(OUTB, "$(P)$(R)SizeX.HOPR NPP")
}

record(longin, "$(P)$(R)MaxY")
{
    field(INP,  "$(P)$(R)MaxSizeY_RBV CP")
    field(FLNK, "$(P)$(R)SetYHOPR.PROC PP")
}

record(dfanout, "$(P)$(R)SetYHOPR")
{
    field(DOL,  "$(P)$(R)MaxY NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(P)$(R)MinY.HOPR NPP")
    field(OUTB, "$(P)$(R)SizeY.HOPR NPP")
}

###################################################################
#  These records whether dimensions of 1 are collapsed (removed)  #                               # 
###################################################################

record(bo, "$(P)$(R)CollapseDims")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))COLLAPSE_DIMS")
   field(VAL,  "0")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   info(autosaveFields, "VAL")
}

record(bi, "$(P)$(R)CollapseDims_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))COLLAPSE_DIMS")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}


